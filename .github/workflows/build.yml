name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]
        scripting: [lua, noscripts]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.17
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-gui-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        # 自动覆盖解压，不提示
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          curl -L -o skia.zip https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
          7z x skia.zip -aoa -o"skia"

          # 获取Skia库的绝对路径
          export SKIA_ABSOLUTE_PATH=$(pwd)/skia
  
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=ON \
            -DENABLE_SCRIPTING=$enable_scripting \
            -DENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=$SKIA_ABSOLUTE_PATH \
            -DSKIA_LIBRARY=$SKIA_ABSOLUTE_PATH/out/Release-x64/skia.lib \
            -DSKIA_LIBRARY_DIR=$SKIA_ABSOLUTE_PATH/out/Release-x64
        else
          curl -L -o skia.zip https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-macOS-Release-arm64.zip
          unzip -o skia.zip -d skia

          # 获取Skia库的绝对路径
          export SKIA_ABSOLUTE_PATH=$(pwd)/skia
  
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=ON \
            -DENABLE_SCRIPTING=$enable_scripting \
            -DENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=$SKIA_ABSOLUTE_PATH \
            -DSKIA_LIBRARY=$SKIA_ABSOLUTE_PATH/out/Release-arm64/libskia.a \
            -DSKIA_LIBRARY_DIR=$SKIA_ABSOLUTE_PATH/out/Release-arm64
        fi

        
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    - name: Create DMG on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install create-dmg

        # 创建一个 macOS 应用包结构
        mkdir -p build/Aseprite.app/Contents/MacOS
        mkdir -p build/Aseprite.app/Contents/Resources

        # 移动可执行文件和资源
        cp build/bin/aseprite build/Aseprite.app/Contents/MacOS/
        chmod +x build/Aseprite.app/Contents/MacOS/aseprite
        cp -R build/bin/data build/Aseprite.app/Contents/Resources/

        # 创建 Info.plist
        cat > build/Aseprite.app/Contents/Info.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>aseprite</string>
          <key>CFBundleIdentifier</key>
          <string>org.aseprite.app</string>
          <key>CFBundleName</key>
          <string>Aseprite</string>
          <key>CFBundleIconFile</key>
          <string>ase128.icns</string>
        </dict>
        </plist>
        EOF

        # 转换 PNG 图标为 ICNS 格式
        mkdir -p icon.iconset
        sips -z 128 128 data/icons/ase128.png --out icon.iconset/icon_128x128.png
        iconutil -c icns icon.iconset -o build/Aseprite.app/Contents/Resources/ase128.icns

        mkdir dmg_folder
        cp -R build/Aseprite.app dmg_folder/

        # 生成 .dmg
        create-dmg \
          --volname "Aseprite" \
          --volicon "build/Aseprite.app/Contents/Resources/ase128.icns" \
          --window-size 800 600 \
          --icon-size 128 \
          --icon "Aseprite.app" 128 128 \
          --hide-extension "Aseprite.app" \
          --app-drop-link 375 125 \
          "build/Aseprite.dmg" \
          "dmg_folder"
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ runner.os }}-${{ matrix.scripting }}
        path: |
          build/bin/aseprite${{ runner.os == 'Windows' && '.exe' || '' }}
          build/bin/data
          build/bin/*${{ runner.os == 'Windows' && '.dll' || '.dylib' }}
          build/Aseprite.dmg

